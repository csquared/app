{{ define "formation" }}
  {
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Parameters" : {
      {{ template "balancer-params" . }}
      {{ template "process-params" . }}

      "Cluster": {
        "Type" : "String",
        "Default" : "",
        "Description" : ""
      },
      "Environment": {
        "Type": "String",
        "Default": "",
        "Description": ""
      },
      "Key": {
        "Type": "String",
        "Default": "",
        "Description": ""
      },
      "Kernel": {
        "Type" : "String",
        "Default" : "",
        "Description" : ""
      },
      "Release": {
        "Type" : "String",
        "Default" : "",
        "Description" : ""
      },
      "Repository": {
        "Type" : "String",
        "Default" : "",
        "Description" : "Source code repository"
      },
      "Subnets": {
        "Type" : "List<AWS::EC2::Subnet::Id>",
        "Default" : "",
        "Description" : "VPC subnets for this app"
      },
      "VPC": {
        "Type" : "AWS::EC2::VPC::Id",
        "Default" : "",
        "Description" : "VPC for this app"
      }
    },
    "Conditions": {
      {{ template "balancer-conditions" . }}

      "BlankEnvironment": { "Fn::Equals": [ { "Ref": "Environment" }, "" ] }
    },
    "Resources": {
      {{ template "balancer-resources" . }}
      {{ template "process-resources" . }}

      {{ template "security" }}
      {{ template "state" }}
    },
    "Outputs": {
      {{ template "balancer-outputs" . }}

      "Settings": {
        "Value": { "Ref": "Settings" }
      }
    }
  }
{{ end }}

{{ define "process-params" }}
  {{ range $k, $e := . }}
    "{{ upper $k }}Command": {
      "Type" : "String",
      "Default" : "{{ $e.Command }}",
      "Description" : ""
    },
    "{{ upper $k }}Image": {
      "Type" : "String",
      "Default" : "",
      "Description" : ""
    },
    "{{ upper $k }}Scale": {
      "Type" : "Number",
      "Default" : "1",
      "Description" : ""
    },
  {{ end }}
{{ end }}

{{ define "process-resources" }}
  {{ range $ps, $entry := . }}
    "{{ upper $ps }}TaskDefinition": {
      "Type": "Custom::ECSTaskDefinition",
      "Properties": {
        "ServiceToken": { "Ref": "Kernel" },
        "Name": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "{{ $ps }}" ] ] },
        "App": { "Ref": "AWS::StackName" },
        "Image": { "Ref": "{{ upper $ps }}Image" },
        "Command": { "Ref": "{{ upper $ps }}Command" },
        "Environment": { "Ref": "Environment" },
        "Key": { "Ref": "Key" },
        "Links": [ {{ links $entry }} ],
        "CPU": "200",
        "Memory": "300",
        "PortMappings": [ {{ portmappings $ps $entry }} ]
      }
    },
    "{{ upper $ps }}Service": {
      "Type": "Custom::ECSService",
      "Properties": {
        "ServiceToken": { "Ref": "Kernel" },
        "Cluster": { "Ref": "Cluster" },
        "DesiredCount": { "Ref": "{{ upper $ps }}Scale" },
        "Name": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "{{ $ps }}" ] ] },
        "TaskDefinition": { "Ref": "{{ upper $ps }}TaskDefinition" },
        "Role": { "Ref": "ServiceRole" },
        "LoadBalancers": [ {{ loadbalancers $ps $entry }} ]
      }
    },
  {{ end }}
{{ end }}

{{ define "balancer-conditions" }}
  {{ range $ps, $entry := . }}
    {{ if $entry.HasPorts }}
      "Blank{{ upper $ps }}Check": { "Fn::Equals": [ { "Ref": "{{ upper $ps }}Check" }, "" ] },
    {{ end }}
  {{ end }}
{{ end }}

{{ define "balancer-params" }}
  {{ range $ps, $entry := . }}
    {{ if $entry.HasPorts }}
      "{{ upper $ps }}Check": {
        "Type": "String",
        "Default": "/",
        "Description": ""
      },
      {{ range $entry.Ports }}
        {{ $parts := (split . ":") }}
        "{{ upper $ps }}Port{{ index $parts 0 }}Balancer": {
          "Type" : "String",
          "Default" : "{{ index $parts 0 }}",
          "Description" : ""
        },
        "{{ upper $ps }}Port{{ index $parts 0 }}Host": {
          "Type" : "String",
          "Default" : "{{ randomport }}",
          "Description" : ""
        },
      {{ end }}
    {{ end }}
  {{ end }}
{{ end }}

{{ define "balancer-outputs" }}
  {{ range $ps, $entry := . }}
    {{ if $entry.HasPorts }}
      "{{ upper $ps }}BalancerHost": {
        "Value": { "Fn::GetAtt": [ "{{ upper $ps }}Balancer", "DNSName" ] }
      },
      {{ range $entry.Ports }}
        {{ $parts := (split . ":") }}
        "{{ upper $ps }}Port{{ index $parts 0 }}Balancer": {
          "Value": { "Ref": "{{ upper $ps }}Port{{ index $parts 0 }}Balancer" }
        },
      {{ end }}
    {{ end }}
  {{ end }}
{{ end }}

{{ define "balancer-resources" }}
  {{ range $ps, $entry := . }}
    {{ if $entry.HasPorts }}
      "{{ upper $ps }}BalancerSecurityGroup": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
          "GroupDescription": { "Fn::Join": [ " ", [ { "Ref": "AWS::StackName" }, "-balancer" ] ] },
          "SecurityGroupIngress": [ {{ ingress $ps $entry }} ],
          "VpcId": { "Ref": "VPC" }
        }
      },
      "{{ upper $ps }}Balancer": {
        "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
        "Properties": {
          "Subnets": { "Ref": "Subnets" },
          "ConnectionDrainingPolicy": { "Enabled": true, "Timeout": 60 },
          "ConnectionSettings": { "IdleTimeout": 60 },
          "CrossZone": true,
          "HealthCheck": {
            "HealthyThreshold": "2",
            "Interval": 5,
            "Target": { "Fn::Join": [ "", [ "HTTP:", { "Ref": "{{ upper $ps }}Port{{ $entry.FirstPort }}Host" }, { "Ref": "{{ upper $ps }}Check" } ] ] },
            "Timeout": 3,
            "UnhealthyThreshold": "2"
          },
          "Listeners": [ {{ listeners $ps $entry }} ],
          "LBCookieStickinessPolicy": [{ "PolicyName": "affinity" }],
          "LoadBalancerName": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "{{ $ps }}" ] ] },
          "SecurityGroups": [ { "Ref": "{{ upper $ps }}BalancerSecurityGroup" } ]
        }
      },
    {{ end }}
  {{ end }}
{{ end }}


{{ define "security" }}
  "ServiceRole": {
    "Type": "AWS::IAM::Role",
    "Properties": {
      "AssumeRolePolicyDocument": {
        "Statement": [
          {
            "Action": [
              "sts:AssumeRole"
            ],
            "Effect": "Allow",
            "Principal": {
              "Service": [
                "ecs.amazonaws.com"
              ]
            }
          }
        ],
        "Version": "2012-10-17"
      },
      "Path": "/",
      "Policies": [
        {
          "PolicyName": "ServiceRole",
          "PolicyDocument": {
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "elasticloadbalancing:Describe*",
                  "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                  "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                  "ec2:Describe*",
                  "ec2:AuthorizeSecurityGroupIngress"
                ],
                "Resource": [
                  "*"
                ]
              }
            ]
          }
        }
      ]
    }
  },
{{ end }}

{{ define "state" }}
  "DynamoBuilds": {
    "Type": "AWS::DynamoDB::Table",
    "Properties": {
      "TableName": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "builds" ] ] },
      "AttributeDefinitions": [
        { "AttributeName": "id", "AttributeType": "S" },
        { "AttributeName": "app", "AttributeType": "S" },
        { "AttributeName": "created", "AttributeType": "S" }
      ],
      "KeySchema": [ { "AttributeName": "id", "KeyType": "HASH" } ],
      "GlobalSecondaryIndexes": [ {
        "IndexName": "app.created",
        "KeySchema": [ { "AttributeName": "app", "KeyType": "HASH" }, { "AttributeName": "created", "KeyType": "RANGE" } ],
        "Projection": { "ProjectionType": "ALL" },
        "ProvisionedThroughput": { "ReadCapacityUnits": "5", "WriteCapacityUnits": "5" }
      }],
      "ProvisionedThroughput": { "ReadCapacityUnits": "5", "WriteCapacityUnits": "5" }
    }
  },
  "DynamoChanges": {
    "Type": "AWS::DynamoDB::Table",
    "Properties": {
      "TableName": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "changes" ] ] },
      "AttributeDefinitions": [
        { "AttributeName": "app", "AttributeType": "S" },
        { "AttributeName": "created", "AttributeType": "S" }
      ],
      "KeySchema": [ { "AttributeName": "app", "KeyType": "HASH" }, { "AttributeName": "created", "KeyType": "RANGE" } ],
      "ProvisionedThroughput": { "ReadCapacityUnits": "5", "WriteCapacityUnits": "5" }
    }
  },
  "DynamoReleases": {
    "Type": "AWS::DynamoDB::Table",
    "Properties": {
      "TableName": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "releases" ] ] },
      "AttributeDefinitions": [
        { "AttributeName": "id", "AttributeType": "S" },
        { "AttributeName": "app", "AttributeType": "S" },
        { "AttributeName": "created", "AttributeType": "S" }
      ],
      "KeySchema": [ { "AttributeName": "id", "KeyType": "HASH" } ],
      "GlobalSecondaryIndexes": [{
        "IndexName": "app.created",
        "KeySchema": [ { "AttributeName": "app", "KeyType": "HASH" }, { "AttributeName": "created", "KeyType": "RANGE" } ],
        "Projection": { "ProjectionType": "ALL" },
        "ProvisionedThroughput": { "ReadCapacityUnits": "5", "WriteCapacityUnits": "5" }
      }],
      "ProvisionedThroughput": { "ReadCapacityUnits": "5", "WriteCapacityUnits": "5" }
    }
  },
  "Settings": {
    "Type": "AWS::S3::Bucket",
    "Properties": {
      "AccessControl": "Private",
      "Tags": [
        { "Key": "system", "Value": "convox" },
        { "Key": "app", "Value": { "Ref": "AWS::StackName" } }
      ]
    }
  }
{{ end }}
